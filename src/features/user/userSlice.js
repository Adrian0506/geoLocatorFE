import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';

const initialState  = {
    user: 'Guest',
    sessionId: null,
    apikey: null,
    email: '',
    mapPlots: [],
    friendView: 'none'
  };

export const userSlice = createSlice({
    name: 'user',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
      auth: (state, payload) => {
        // Redux Toolkit allows us to write "mutating" logic in reducers. It
        // doesn't actually mutate the state because it uses the Immer library,
        // which detects changes to a "draft state" and produces a brand new
        // immutable state based off those changes
        state.user = payload.payload.data.firstName;
        state.apikey = payload.payload.data
      },
      updateUserName: (state, action) => {
        state.user = action.payload;
      },
      updateCurrentPlots: (state, action) => {
        state.mapPlots = action.payload
      },
      updateEmail: (state, action) => {
        state.email = action.payload
      },
      decrement: (state) => {
        state.user = 'logged out';
      },
      updateFriendView: (state, action) => {
        state.friendView = action.payload
      }
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
}});

export const { auth, updateUserName, updateEmail, updateCurrentPlots, updateFriendView, decrement } = userSlice.actions;

export default userSlice.reducer
